---

# Execute everything on localhost
- name: Create and configure the instance (including the VPC) 
  hosts: localhost
  # Use a local connection, so that a running SSH Daemon on the local machine is not needed
  connection: local
  tasks:
    # Create the VPC, if not yet available
    # Save the output so that we can retrieve the ID
    - name: VPC configuration
      ec2_vpc_net:
        aws_access_key: "{{ aws_acc_key }}"
        aws_secret_key: "{{ aws_sec_key }}"
        region: "{{ aws_region }}"
        name: " {{ vpc_name}}"
        cidr_block: "{{ vpc_cidr }}"
      run_once: true
      register: vpc_net
    - name: Set a new fact for the VPC ID
      set_fact:
        vpc_id: "{{ vpc_net.vpc.id}}"

    # Pick a subnet from the CIDR space of the VPC
    # Save the ID in a fact
    - name: Subnet configuration
      ec2_vpc_subnet:
        aws_access_key: "{{ aws_acc_key }}"
        aws_secret_key: "{{ aws_sec_key }}"
        region: "{{ aws_region }}"
        cidr: "{{ vpc_subnet_cidr }}"
        vpc_id: "{{ vpc_id }}"
      #        map_public: true
      run_once: true
      register: vpc_subnet
    - name: Set a new fact for the VPC subnet ID
      set_fact:
        vpc_subnet_id: "{{ vpc_subnet.subnet.id}}"

    # Setup the internet gateway
    - name: Gateway configuration
      ec2_vpc_igw:
        aws_access_key: "{{ aws_acc_key }}"
        aws_secret_key: "{{ aws_sec_key }}"
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
      run_once: true
      register: vpc_igw
    - name: Set a new fact for the VPC Gateway ID
      set_fact:
        vpc_igw_id: "{{ vpc_igw.gateway_id}}"

    # Routing table configuration, add the default route to the gateway
    # Do it only when the subnet has been created
    - name: Routing table configuration
      ec2_vpc_route_table:
        aws_access_key: "{{ aws_acc_key }}"
        aws_secret_key: "{{ aws_sec_key }}"
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
        subnets: 
          - "{{ vpc_subnet_id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ vpc_igw_id }}"
      run_once: true
      register: vpc_rt
      when: vpc_net is changed

    # Firewall settings
    - name: Security group configuration
      ec2_group:
        aws_access_key: "{{ aws_acc_key }}"
        aws_secret_key: "{{ aws_sec_key }}"
        description: Security group for the demo
        name: "{{ vpc_sg_name }}"
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 22
            cidr_ip: 0.0.0.0/0
      run_once: true
      register: vpc_metronom_sg
    - name: Set a new fact for the VPC Metronom Security Group ID
      set_fact:
        vpc_metronom_sg_id: "{{ vpc_metronom_sg.group_id }}"

    # Launch the instance
    # For the security group(s) use the names, so that we can add the default one
    # and the one just set up
    - name: Instance configuration
      ec2:
        aws_access_key: "{{ aws_acc_key }}"
        aws_secret_key: "{{ aws_sec_key }}"
        assign_public_ip: false
        group:
          - default
          - "{{ vpc_sg_name }}"
        #group_id:
        #- "{{ vpc_metronom_sg_id }}"
        image: "{{ instance_ami_id }}"
        instance_type: "{{ instance_free_type }}"
        key_name: "{{ instance_keypair }}"
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
      run_once: true
      register: ec2_instance
    - name: Set a new fact for Instance ID
      set_fact:
        ec2_instance_id: "{{ ec2_instance.instances[0].id }}"

    # At the beginning the instance is "pending", it's not possible
    # to assign an IP
    - name: Wait for the instance to be running
      ec2_instance_facts:
        aws_access_key: "{{ aws_acc_key }}"
        aws_secret_key: "{{ aws_sec_key }}"
        region: "{{ aws_region }}"
        instance_ids: 
         - "{{ ec2_instance_id }}"
      register: ec2_instance_facts
      until: ec2_instance_facts is success and 'running' in ec2_instance_facts.instances[0].state.name
      retries: "{{ num_retries}}"
      delay: "{{ delay_sec }}"

    # Assign a public IP
    - name: Elastic IP configuration
      ec2_eip:
        aws_access_key: "{{ aws_acc_key }}"
        aws_secret_key: "{{ aws_sec_key }}"
        region: "{{ aws_region }}"
        device_id: "{{ ec2_instance_id}}"
        release_on_disassociation: true
      run_once: true
      register: ec2_instance_eip
    - name: Set a new fact for Instance public IP
      set_fact:
        ec2_instance_ip: "{{ ec2_instance_eip.public_ip }}"

    # Print the public IP and the instance ID, it could be useful in the future
    - name: Print the public IP and the instance
      debug:
        msg: >
          The IP is {{ ec2_instance_ip }}
          The instance ID is {{ ec2_instance_id }}
      tags:
        - instance

    # Since we couldn't know the IP of the instance before launching the script, 
    # it hasn't been possible to setup an inventory file.
    # Let's do it now, dynamically.
    # Let's also setup the connection paramters (username and ssh key location)
    # to connect to the VM. Add the host key to the known hosts automatically
    - name: Add the host to the in-memory inventory
      add_host:
        name: "{{ ec2_instance_ip }}"
        groups: "{{ inventory_group }}"
        ansible_user: "{{ instance_user }}"
        ansible_ssh_private_key_file: "{{ aws_keypair_path }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      tags:
        - instance
    # It could take a bit before the public IP is reachable, let's wait for port 22 to be available
    - name: Waiting for the host to be ready
      delegate_to: localhost
      wait_for:
        host: "{{ ec2_instance_ip }}"
        port: 22
        search_regex: OpenSSH
      tags:
        - instance

# Work on the instance now
- name: Configure the instance
  become: yes
  # Read inventory_group from the localhost
  hosts: "{{ hostvars['localhost']['inventory_group'] }}"
  tags:
    - instance
  tasks:
    # Python is not installed, let's use the "raw" module 
    # to install it. The module works at a low level, plain ssh and shell
    - name: Install python and apt dependencies
      raw: /usr/bin/apt-get -y install python python-apt aptitude
      register: raw_command
      until: raw_command is success 
      retries: "{{ num_retries}}"
      delay: "{{ delay_sec }}"
    # Let's gather the facts about the instance
    - name: Facts gathering
      setup:
    # Install the web servers and the packages that are needed
    - name: Install Apache2 and the needed packages
      apt:
        name: 
          - apache2
          - python-scgi
          - python-pip
          - libapache2-mod-wsgi
        update_cache: true
    # Let's install the flask framework for the REST API
    - name: Install Flask
      command: /usr/bin/pip install flask_restful
    # Let's copy the index.html file. It's a template customised with the instance's FQDN
    - name: Deploy the new homepage
      template:
        src: index.jinja2
        dest: /var/www/html/index.html
        mode: 0644
        owner: root
        group: root
        backup: true
    # Let's copy the python script to handle the form
    - name:  Copy the cgi script to the instance
      copy:
        dest: /usr/lib/cgi-bin
        src: pwdform.py
        mode: 0755
        owner: root
        group: root
    # Create the folder for the WSGI files
    - name: Create /var/www/rest
      file:
        path: /var/www/rest
        state: directory
        mode: 0755
        owner: root
        group: root
    # Copy the Flask application
    - name: Deploy the Flask app
      copy:
        dest: /var/www/rest
        src: password.py
        mode: 0644
        owner: root
        group: root
    # Copy the WSGI application file
    - name: Deploy the WSGI configuration
      copy:
        dest: /var/www/rest
        src: password.wsgi
        mode: 0644
        owner: root
        group: root
    # Copy the vhost configuration
    - name: Configure the virtual host
      copy:
        dest: /etc/apache2/sites-enabled/000-default.conf
        src: vhost-rest.conf
        mode: 0644
        owner: root
        group: root
      notify:
        - restart apache2
    # Enable the CGI module and trigger a restart of the webserver if needed
    - name: Enable the Apache cgi module
      apache2_module:
        name: cgid
      notify:
        - restart apache2
    # Enable the WSGI module and trigger a restart of the webserver if needed
    - name: Enable the Apache wsgi module
      apache2_module:
        name: wsgi
      notify:
        - restart apache2

  # The handler to restart Apache
  handlers:
    - name: restart apache2
      service:
        name: apache2
        enabled: true
        state: restarted
